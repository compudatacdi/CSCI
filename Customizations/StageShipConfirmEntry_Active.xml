<?xml version="1.0" standalone="yes"?>
<GenXDataDataSet xmlns="http://www.epicor.com/Ice/300/BO/GenXData/GenXData">
  <xs:schema id="GenXDataDataSet" targetNamespace="http://www.epicor.com/Ice/300/BO/GenXData/GenXData" xmlns:mstns="http://www.epicor.com/Ice/300/BO/GenXData/GenXData" xmlns="http://www.epicor.com/Ice/300/BO/GenXData/GenXData" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:msprop="urn:schemas-microsoft-com:xml-msprop" attributeFormDefault="qualified" elementFormDefault="qualified">
    <xs:element name="GenXDataDataSet" msdata:IsDataSet="true" msdata:UseCurrentLocale="true" msprop:ExportFormat="Gen3" msprop:IsMain="true">
      <xs:complexType>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="XXXDef" msprop:SchemaName="Ice">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Company" msprop:ReadOnly="True" msprop:Like="Company.Company" msprop:Format="x(8)" type="xs:string" />
                <xs:element name="ProductID" msdata:Caption="Product" msprop:ReadOnly="True" msprop:Like="DashBdDef.ProductID" msprop:Format="x(2)" type="xs:string" />
                <xs:element name="TypeCode" msdata:Caption="Type" msprop:ReadOnly="True" msprop:Like="XXXDef.TypeCode" msprop:Format="x(20)" type="xs:string" />
                <xs:element name="Key1" msdata:Caption="Key 1" msprop:Like="XXXDef.Key1" msprop:Format="x(50)" type="xs:string" />
                <xs:element name="Key2" msdata:Caption="Key 2" msprop:Like="XXXDef.Key2" msprop:Format="x(100)" type="xs:string" />
                <xs:element name="Key3" msdata:Caption="Key 3" msprop:Like="XXXDef.Key3" msprop:Format="x(50)" type="xs:string" />
                <xs:element name="Description" msprop:Format="x(60)" type="xs:string" minOccurs="0" />
                <xs:element name="LastUpdated" msdata:Caption="Last Updated" msprop:ReadOnly="True" type="xs:dateTime" minOccurs="0" />
                <xs:element name="LastUpdatedBy" msdata:Caption="User ID" msprop:ReadOnly="True" msprop:Like="UserFile.UserID" msprop:Format="x(75)" type="xs:string" minOccurs="0" />
                <xs:element name="Version" msprop:ReadOnly="True" msprop:Format="x(20)" type="xs:string" minOccurs="0" />
                <xs:element name="DataBaseVersion" msprop:ReadOnly="True" msprop:Format="99999999" type="xs:int" minOccurs="0" />
                <xs:element name="SysCharacter01" msprop:Format="x(16000)" type="xs:string" minOccurs="0" />
                <xs:element name="SysCharacter02" msprop:Format="x(16000)" type="xs:string" minOccurs="0" />
                <xs:element name="SysCharacter03" msprop:Format="x(16000)" type="xs:string" minOccurs="0" />
                <xs:element name="SysCharacter04" msprop:ReadOnly="True" msprop:Format="x(16000)" type="xs:string" minOccurs="0" />
                <xs:element name="SysCharacter05" msprop:ReadOnly="True" msprop:Format="x(16000)" type="xs:string" minOccurs="0" />
                <xs:element name="SysNumber01" type="xs:decimal" minOccurs="0" />
                <xs:element name="SysNumber02" type="xs:decimal" minOccurs="0" />
                <xs:element name="SysNumber03" type="xs:decimal" minOccurs="0" />
                <xs:element name="SysNumber04" type="xs:decimal" minOccurs="0" />
                <xs:element name="SysNumber05" type="xs:decimal" minOccurs="0" />
                <xs:element name="SysDate01" type="xs:dateTime" minOccurs="0" />
                <xs:element name="SysDate02" type="xs:dateTime" minOccurs="0" />
                <xs:element name="SysDate03" type="xs:dateTime" minOccurs="0" />
                <xs:element name="SysDate04" type="xs:dateTime" minOccurs="0" />
                <xs:element name="SysDate05" type="xs:dateTime" minOccurs="0" />
                <xs:element name="SysCheckBox01" type="xs:boolean" minOccurs="0" />
                <xs:element name="SysCheckBox02" type="xs:boolean" minOccurs="0" />
                <xs:element name="SysCheckBox03" type="xs:boolean" minOccurs="0" />
                <xs:element name="SysCheckBox04" type="xs:boolean" minOccurs="0" />
                <xs:element name="SysCheckBox05" type="xs:boolean" minOccurs="0" />
                <xs:element name="CommentText" msprop:Format="x(16000)" type="xs:string" minOccurs="0" />
                <xs:element name="CGCCode" msprop:ReadOnly="True" msprop:Format="x(8)" type="xs:string" />
                <xs:element name="SystemFlag" msprop:ReadOnly="True" type="xs:boolean" minOccurs="0" />
                <xs:element name="SysRevID" msprop:SystemColumn="True" msprop:Format="&gt;&gt;,&gt;&gt;&gt;,&gt;&gt;9" type="xs:long" minOccurs="0" />
                <xs:element name="SysRowID" msdata:DataType="System.Guid, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" msprop:SystemColumn="True" msprop:Format="X(36)" type="xs:string" minOccurs="0" />
                <xs:element name="SysCheckBox06" type="xs:boolean" minOccurs="0" />
                <xs:element name="SysCheckBox07" type="xs:boolean" minOccurs="0" />
                <xs:element name="OnMenu" type="xs:boolean" minOccurs="0" />
                <xs:element name="Duplicate" type="xs:boolean" minOccurs="0" />
                <xs:element name="Cosmetic" type="xs:boolean" minOccurs="0" />
                <xs:element name="Content" msprop:Format="x(16000)" type="xs:string" minOccurs="0" />
                <xs:element name="BitFlag" msdata:Caption="Bit Flag" msprop:ReadOnly="True" msprop:SystemColumn="True" msprop:External="True" type="xs:int" minOccurs="0" />
                <xs:element name="RowMod" msprop:SystemColumn="True" msprop:External="True" type="xs:string" minOccurs="0" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:choice>
      </xs:complexType>
      <xs:unique name="XXXDefPK_XXXDef" msdata:PrimaryKey="true">
        <xs:selector xpath=".//mstns:XXXDef" />
        <xs:field xpath="mstns:Company" />
        <xs:field xpath="mstns:ProductID" />
        <xs:field xpath="mstns:TypeCode" />
        <xs:field xpath="mstns:CGCCode" />
        <xs:field xpath="mstns:Key1" />
        <xs:field xpath="mstns:Key2" />
        <xs:field xpath="mstns:Key3" />
      </xs:unique>
    </xs:element>
  </xs:schema>
  <XXXDef>
    <Company>19289</Company>
    <ProductID>EP</ProductID>
    <TypeCode>Customization</TypeCode>
    <Key1>StageShipConfirmEntry_Active</Key1>
    <Key2>App.StageShipConfirmEntry.StageShipConfirmForm</Key2>
    <Key3 />
    <Description>Stage Ship Confirm Entry Customization</Description>
    <LastUpdated>2020-03-10T00:00:00-04:00</LastUpdated>
    <LastUpdatedBy>19289-LCurcio</LastUpdatedBy>
    <Version>3/10/2020 10:56:45 A</Version>
    <DataBaseVersion>0</DataBaseVersion>
    <SysCharacter01 />
    <SysCharacter02 />
    <SysCharacter03 />
    <SysCharacter04>Pass</SysCharacter04>
    <SysCharacter05>3.2.500.0</SysCharacter05>
    <SysNumber01>0.000000000</SysNumber01>
    <SysNumber02>0.000000000</SysNumber02>
    <SysNumber03>0.000000000</SysNumber03>
    <SysNumber04>0.000000000</SysNumber04>
    <SysNumber05>0.000000000</SysNumber05>
    <SysCheckBox01>false</SysCheckBox01>
    <SysCheckBox02>false</SysCheckBox02>
    <SysCheckBox03>false</SysCheckBox03>
    <SysCheckBox04>false</SysCheckBox04>
    <SysCheckBox05>false</SysCheckBox05>
    <CommentText />
    <CGCCode />
    <SystemFlag>false</SystemFlag>
    <SysRevID>11999230994</SysRevID>
    <SysRowID>9a648adc-d12e-497c-b3f5-6ce2415af0b4</SysRowID>
    <SysCheckBox06>false</SysCheckBox06>
    <SysCheckBox07>false</SysCheckBox07>
    <OnMenu>false</OnMenu>
    <Duplicate>false</Duplicate>
    <Cosmetic>false</Cosmetic>
    <Content>&lt;CustomizationDS xmlns="http://tempuri.org/XMLSchema.xsd"&gt;
  &lt;xs:schema id="CustomizationDS" targetNamespace="http://tempuri.org/XMLSchema.xsd" xmlns:mstns="http://tempuri.org/XMLSchema.xsd" xmlns="http://tempuri.org/XMLSchema.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:msprop="urn:schemas-microsoft-com:xml-msprop" attributeFormDefault="qualified" elementFormDefault="qualified"&gt;
    &lt;xs:element name="CustomizationDS" msdata:IsDataSet="true" msdata:Locale="" msprop:BuildVersion="3.2.500.0"&gt;
      &lt;xs:complexType&gt;
        &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
          &lt;xs:element name="Controls"&gt;
            &lt;xs:complexType&gt;
              &lt;xs:sequence&gt;
                &lt;xs:element name="FormsID" type="xs:string" /&gt;
                &lt;xs:element name="ControlName" type="xs:string" /&gt;
                &lt;xs:element name="Key" type="xs:string" /&gt;
                &lt;xs:element name="ParentControlKey" type="xs:string" /&gt;
                &lt;xs:element name="ControlType" type="xs:string" /&gt;
                &lt;xs:element name="Company" type="xs:string" /&gt;
                &lt;xs:element name="Plant" type="xs:string" /&gt;
                &lt;xs:element name="DcdUserId" type="xs:string" /&gt;
                &lt;xs:element name="GroupID" type="xs:string" /&gt;
                &lt;xs:element name="ControlsID" type="xs:string" /&gt;
              &lt;/xs:sequence&gt;
            &lt;/xs:complexType&gt;
          &lt;/xs:element&gt;
          &lt;xs:element name="Properties"&gt;
            &lt;xs:complexType&gt;
              &lt;xs:sequence&gt;
                &lt;xs:element name="FormsID" type="xs:string" /&gt;
                &lt;xs:element name="ControlName" type="xs:string" /&gt;
                &lt;xs:element name="Key" type="xs:string" /&gt;
                &lt;xs:element name="PropertyName" type="xs:string" /&gt;
                &lt;xs:element name="PropertyValue" type="xs:string" /&gt;
                &lt;xs:element name="Company" type="xs:string" /&gt;
                &lt;xs:element name="Plant" type="xs:string" /&gt;
                &lt;xs:element name="DcdUserID" type="xs:string" /&gt;
                &lt;xs:element name="GroupID" type="xs:string" /&gt;
                &lt;xs:element name="PropertiesID" type="xs:string" /&gt;
              &lt;/xs:sequence&gt;
            &lt;/xs:complexType&gt;
          &lt;/xs:element&gt;
        &lt;/xs:choice&gt;
      &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
  &lt;/xs:schema&gt;
  &lt;Controls&gt;
    &lt;FormsID&gt;StageShipConfirmForm&lt;/FormsID&gt;
    &lt;ControlName&gt;erp.contracts.bo.salesorder.dll&lt;/ControlName&gt;
    &lt;Key&gt;EpiString.ExecutionPath*erp.contracts.bo.salesorder.dll&lt;/Key&gt;
    &lt;ParentControlKey /&gt;
    &lt;ControlType&gt;AssemblyReference&lt;/ControlType&gt;
    &lt;Company /&gt;
    &lt;Plant /&gt;
    &lt;DcdUserId /&gt;
    &lt;GroupID /&gt;
    &lt;ControlsID /&gt;
  &lt;/Controls&gt;
  &lt;Controls&gt;
    &lt;FormsID&gt;StageShipConfirmForm&lt;/FormsID&gt;
    &lt;ControlName&gt;erp.adapters.salesorder.dll&lt;/ControlName&gt;
    &lt;Key&gt;EpiString.ExecutionPath*erp.adapters.salesorder.dll&lt;/Key&gt;
    &lt;ParentControlKey /&gt;
    &lt;ControlType&gt;AssemblyReference&lt;/ControlType&gt;
    &lt;Company /&gt;
    &lt;Plant /&gt;
    &lt;DcdUserId /&gt;
    &lt;GroupID /&gt;
    &lt;ControlsID /&gt;
  &lt;/Controls&gt;
  &lt;Controls&gt;
    &lt;FormsID&gt;StageShipConfirmForm&lt;/FormsID&gt;
    &lt;ControlName&gt;ice.core.session.dll&lt;/ControlName&gt;
    &lt;Key&gt;EpiString.ExecutionPath*ice.core.session.dll&lt;/Key&gt;
    &lt;ParentControlKey /&gt;
    &lt;ControlType&gt;AssemblyReference&lt;/ControlType&gt;
    &lt;Company /&gt;
    &lt;Plant /&gt;
    &lt;DcdUserId /&gt;
    &lt;GroupID /&gt;
    &lt;ControlsID /&gt;
  &lt;/Controls&gt;
  &lt;Controls&gt;
    &lt;FormsID&gt;StageShipConfirmForm&lt;/FormsID&gt;
    &lt;ControlName&gt;ice.contracts.bo.dynamicquery.dll&lt;/ControlName&gt;
    &lt;Key&gt;EpiString.ExecutionPath*ice.contracts.bo.dynamicquery.dll&lt;/Key&gt;
    &lt;ParentControlKey /&gt;
    &lt;ControlType&gt;AssemblyReference&lt;/ControlType&gt;
    &lt;Company /&gt;
    &lt;Plant /&gt;
    &lt;DcdUserId /&gt;
    &lt;GroupID /&gt;
    &lt;ControlsID /&gt;
  &lt;/Controls&gt;
  &lt;Controls&gt;
    &lt;FormsID&gt;StageShipConfirmForm&lt;/FormsID&gt;
    &lt;ControlName&gt;epicor.servicemodel.dll&lt;/ControlName&gt;
    &lt;Key&gt;EpiString.ExecutionPath*epicor.servicemodel.dll&lt;/Key&gt;
    &lt;ParentControlKey /&gt;
    &lt;ControlType&gt;AssemblyReference&lt;/ControlType&gt;
    &lt;Company /&gt;
    &lt;Plant /&gt;
    &lt;DcdUserId /&gt;
    &lt;GroupID /&gt;
    &lt;ControlsID /&gt;
  &lt;/Controls&gt;
  &lt;Properties&gt;
    &lt;FormsID&gt;StageShipConfirmForm&lt;/FormsID&gt;
    &lt;ControlName&gt;ugdData&lt;/ControlName&gt;
    &lt;Key&gt;90c60fd1-35b1-47d8-a7d9-022999fadb51&lt;/Key&gt;
    &lt;PropertyName&gt;ChildIndex&lt;/PropertyName&gt;
    &lt;PropertyValue&gt;0&lt;/PropertyValue&gt;
    &lt;Company /&gt;
    &lt;Plant /&gt;
    &lt;DcdUserID /&gt;
    &lt;GroupID /&gt;
    &lt;PropertiesID /&gt;
  &lt;/Properties&gt;
  &lt;Properties&gt;
    &lt;FormsID&gt;StageShipConfirmForm&lt;/FormsID&gt;
    &lt;ControlName&gt;Customization&lt;/ControlName&gt;
    &lt;Key&gt;2dcd1674-5e34-4d98-b493-c75747027376&lt;/Key&gt;
    &lt;PropertyName&gt;Script&lt;/PropertyName&gt;
    &lt;PropertyValue&gt;// **************************************************
// Custom code for StageShipConfirmForm
// Created: 2/27/2020 2:09:45 PM
// **************************************************
//
//	REVISION LOG
//
//	eb1 02/27/20 eric blackwelder @ compudata
//		add steel surcharge recalculation on sales order
//		needed because when mark as shipped here, epicor messes it up
//		add references to:
//			Ice.Contracts.BO.DynamicQuery.dll
//			Ice.Core.Session.dll
//			Epicor.ServiceModel.dll
//
// **************************************************

using System;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Windows.Forms;
using Erp.Adapters;
using Erp.UI;
using Ice.Lib;
using Ice.Adapters;
using Ice.Lib.Customization;
using Ice.Lib.ExtendedProps;
using Ice.Lib.Framework;
using Ice.Lib.Searches;
using Ice.UI.FormFunctions;

//eb1:
using Ice.Core;
using System.Collections.Generic;
using Ice.Proxy.BO;
using Ice.Core;
using Ice.Contracts;
using Epicor.ServiceModel.Channels;
using Ice.BO;
using Ice.Common;


public class Script
{
	// ** Wizard Insert Location - Do Not Remove 'Begin/End Wizard Added Module Level Variables' Comments! **
	// Begin Wizard Added Module Level Variables **

	private EpiBaseAdapter oTrans_adapter;
	private EpiBaseAdapter oTrans_custShipAdapter;
	private EpiBaseAdapter oTrans_masterPackAdapter;
	// End Wizard Added Module Level Variables **

	// Add Custom Module Level Variables Here **

	//eb1:
	private DynamicQueryImpl dynamicQuery;
	private DynamicQueryDataSet dqds;

	public void InitializeCustomCode()
	{
		// ** Wizard Insert Location - Do not delete 'Begin/End Wizard Added Variable Initialization' lines **
		// Begin Wizard Added Variable Initialization

		this.oTrans_adapter = ((EpiBaseAdapter)(this.csm.TransAdaptersHT["oTrans_adapter"]));
		this.oTrans_adapter.AfterAdapterMethod += new AfterAdapterMethod(this.oTrans_adapter_AfterAdapterMethod);
		this.oTrans_custShipAdapter = ((EpiBaseAdapter)(this.csm.TransAdaptersHT["oTrans_custShipAdapter"]));
		this.oTrans_custShipAdapter.AfterAdapterMethod += new AfterAdapterMethod(this.oTrans_custShipAdapter_AfterAdapterMethod);
		this.oTrans_masterPackAdapter = ((EpiBaseAdapter)(this.csm.TransAdaptersHT["oTrans_masterPackAdapter"]));
		this.oTrans_masterPackAdapter.AfterAdapterMethod += new AfterAdapterMethod(this.oTrans_masterPackAdapter_AfterAdapterMethod);
		this.CartonStage_Column.ColumnChanging += new DataColumnChangeEventHandler(this.CartonStage_BeforeFieldChange);
		// End Wizard Added Variable Initialization

		// Begin Wizard Added Custom Method Calls

		// End Wizard Added Custom Method Calls


		//eb1:
		Session session = (Session)this.oTrans.Session;
		dynamicQuery = WCFServiceSupport.CreateImpl&amp;lt;DynamicQueryImpl&amp;gt;(session, ImplBase&amp;lt;DynamicQuerySvcContract&amp;gt;.UriPath);
		
		//DynamicQueryDataSet ds = new DynamicQueryDataSet();
		dqds = new DynamicQueryDataSet();

		try
		{
			dqds = dynamicQuery.GetByID("GetSOfromMP");
		}
		catch (BusinessObjectException ex)
		{
			if (   (ex.ToString().Contains("does not exist"))
			    || (ex.ToString().Contains("id is not found")) )
			{
				MessageBox.Show("The BAQ ‘GetSOfromMP’ does not exist.");
			}
			else
			{
				MessageBox.Show(ex.ToString());
			}
		}




	}

	public void DestroyCustomCode()
	{
		// ** Wizard Insert Location - Do not delete 'Begin/End Wizard Added Object Disposal' lines **
		// Begin Wizard Added Object Disposal

		this.oTrans_adapter.AfterAdapterMethod -= new AfterAdapterMethod(this.oTrans_adapter_AfterAdapterMethod);
		this.oTrans_adapter = null;
		this.oTrans_custShipAdapter.AfterAdapterMethod -= new AfterAdapterMethod(this.oTrans_custShipAdapter_AfterAdapterMethod);
		this.oTrans_custShipAdapter = null;
		this.oTrans_masterPackAdapter.AfterAdapterMethod -= new AfterAdapterMethod(this.oTrans_masterPackAdapter_AfterAdapterMethod);
		this.oTrans_masterPackAdapter = null;
		this.CartonStage_Column.ColumnChanging -= new DataColumnChangeEventHandler(this.CartonStage_BeforeFieldChange);
		// End Wizard Added Object Disposal

		// Begin Custom Code Disposal

		// End Custom Code Disposal
	}

	//eb1:
	private void oTrans_adapter_AfterAdapterMethod(object sender, AfterAdapterMethodArgs args)
	{
		// ** Argument Properties and Uses **
		// ** args.MethodName **
		// ** Add Event Handler Code **

		// ** Use MessageBox to find adapter method name

		//MessageBox.Show("oTrans_adapter_AfterAdapterMethod: " + args.MethodName);

		switch (args.MethodName)
		{
			case "ShipConfirm":
				RecalcOrderSteelSurcharge();	
				break;
		}

	}

	private void oTrans_custShipAdapter_AfterAdapterMethod(object sender, AfterAdapterMethodArgs args)
	{
		// ** Argument Properties and Uses **
		// ** args.MethodName **
		// ** Add Event Handler Code **

		// ** Use MessageBox to find adapter method name

		//MessageBox.Show("oTrans_custShipAdapter_AfterAdapterMethod: " + args.MethodName);

		switch (args.MethodName)
		{
			case "Update":
				break;
		}

	}

	//eb1:
	private void oTrans_masterPackAdapter_AfterAdapterMethod(object sender, AfterAdapterMethodArgs args)
	{
		// ** Argument Properties and Uses **
		// ** args.MethodName **
		// ** Add Event Handler Code **

		// ** Use MessageBox to find adapter method name

		//MessageBox.Show("oTrans_masterPackAdapter_AfterAdapterMethod: " + args.MethodName);

		switch (args.MethodName)
		{
			case "Update":
				break;
		}

	}

	//eb1:
	public void RecalcOrderSteelSurcharge()
	{

		QueryExecutionDataSet execDS = new QueryExecutionDataSet();
//		execDS.ExecutionParameter.AddExecutionParameterRow("StageNumber", "mp6", "character", false, Guid.NewGuid(), "");
//		execDS.ExecutionParameter.AddExecutionParameterRow("StageNumber", "mp7", "character", false, Guid.NewGuid(), "");
//zzz
//CartonStage_Column
		foreach(DataRow row in CartonStage_Column.Rows)
		{
			execDS.ExecutionParameter.AddExecutionParameterRow("StageNumber", (string)row["StageNumber"], "character", false, Guid.NewGuid(), "");
		}
		execDS.AcceptChanges();
		
		DataTable results = dynamicQuery.Execute(dqds, execDS).Tables["Results"];
		//MessageBox.Show("count: " + results.Rows.Count); 

//return;




		try
		{
			SalesOrderAdapter adapterSalesOrder = new SalesOrderAdapter(this.oTrans);
			adapterSalesOrder.BOConnect();

			List&amp;lt;int&amp;gt; lstSalesOrders = new List&amp;lt;int&amp;gt;();
			int intOrderNum = 0;
/*
			foreach (DataRow row in edvShipDtl.dataView.Table.Rows)
			{
				intOrderNum = (int)row["OrderNum"];
				if(!lstSalesOrders.Contains(intOrderNum))
				{
					lstSalesOrders.Add(intOrderNum);
				}
			}
*/
			foreach (DataRow row in results.Rows)
			{
				intOrderNum = (int)row["ShipDtl_OrderNum"];
				if(!lstSalesOrders.Contains(intOrderNum))
				{
					lstSalesOrders.Add(intOrderNum);
				}
			}


			foreach(int intListOrderNum in lstSalesOrders)
			{			
				System.Data.DataSet dsSalesOrder = adapterSalesOrder.GetData(intListOrderNum);
				if (dsSalesOrder != null)
				{
					double dOrderAmt = (double)0;
					foreach (DataRow dr in dsSalesOrder.Tables["OrderDtl"].Rows)
					{
						if((string)dr["PartNum"] != "Install"
						&amp;amp;&amp;amp; (string)dr["KitFlag"] != "C")
						{
							dOrderAmt += System.Convert.ToDouble((decimal)dr["ExtPriceDtl"])
										- System.Convert.ToDouble((decimal)dr["DocDspDiscount"]);
						}
					}
					foreach (DataRow dr in dsSalesOrder.Tables["OHOrderMsc"].Rows)
					{
						if((string)dr["MiscCode"] == "SURC")
						{
							dr.BeginEdit();
							dr["MiscAmt"] = dOrderAmt * (Convert.ToDouble(dr["Percentage"])/100);
							dr["DocMiscAmt"] = dOrderAmt * (Convert.ToDouble(dr["Percentage"])/100);		
							dr["RowMod"] = "U";
							dr.EndEdit();           
							adapterSalesOrder.Update();
						}
					}
				}
			}
			adapterSalesOrder.Dispose();

		} catch (System.Exception ex)
		{
			ExceptionBox.Show(ex);
		}

	}



	private void CartonStage_BeforeFieldChange(object sender, DataColumnChangeEventArgs args)
	{
		// ** Argument Properties and Uses **
		// args.Row["FieldName"]
		// args.Column, args.ProposedValue, args.Row
		// Add Event Handler Code
		switch (args.Column.ColumnName)
		{
			case "PackNum":
				break;
		}
	}

}



&lt;/PropertyValue&gt;
    &lt;Company /&gt;
    &lt;Plant /&gt;
    &lt;DcdUserID /&gt;
    &lt;GroupID /&gt;
    &lt;PropertiesID /&gt;
  &lt;/Properties&gt;
  &lt;Properties&gt;
    &lt;FormsID&gt;StageShipConfirmForm&lt;/FormsID&gt;
    &lt;ControlName&gt;Customization&lt;/ControlName&gt;
    &lt;Key&gt;2dcd1674-5e34-4d98-b493-c75747027376&lt;/Key&gt;
    &lt;PropertyName&gt;Language&lt;/PropertyName&gt;
    &lt;PropertyValue&gt;CSharp&lt;/PropertyValue&gt;
    &lt;Company /&gt;
    &lt;Plant /&gt;
    &lt;DcdUserID /&gt;
    &lt;GroupID /&gt;
    &lt;PropertiesID /&gt;
  &lt;/Properties&gt;
&lt;/CustomizationDS&gt;</Content>
    <BitFlag>0</BitFlag>
    <RowMod />
  </XXXDef>
</GenXDataDataSet>